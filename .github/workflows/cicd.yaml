name: KBOT-CICD

on: push
    branches: [ develop ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: demo
  GKE_ZONE: us-central1-c 
  DEPLOYMENT_NAME: kbot
  IMAGE: vincewhite19   
  TARGETOS: linux
  TARGETARCH: amd64 
  VERSION: $(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@1bee7de035d65ec5da40a31f8589e240eba8fde5
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
    
      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Run test
        run: make test

      - name: Build
        env:
          APP: "kbot"
        run: make image build

      - name: Publish
        run: make push 

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        kubectl config set-context --current --namespace demo
        kubectl create deploy demo --image "gcr.io/{$IMAGE}/${APP}:${VERSION}-${TARGETOS}-${TARGETARCH}"
        helm template kbot ./helm
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

    # Set up argoCD
    - name: Set up Kustomize
      run: |-
        helm repo add argo https://argoproj.github.io/argo-helm
        helm install my-argo-cd argo/argo-cd    
        kubectl port-forward service/my-argo-cd-argocd-server -n default 8080:443
  cd:
    name: CD
    needs: ci  
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0
    - run: echo "VERSION=$(git describe --tags --abbrev=0)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - uses: mikefarah/yq@master
      with:
        cmd: yq -i '.image.tag=strenv(VERSION)' helm/values.yaml

    - run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -am "Update version $VERSION"
        git push
